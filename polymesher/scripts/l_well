-- This generates a 'L'-shaped well configuration, embedded in a Cartesian 
-- lattice.

-- Lattice spacing.
dx = 10

-- Our domain is [-50m, 300m] x [-150m, 150m] x [-1100m, 0m].
box = bounding_box{x1 = -50, x2 = 300, y1 = -150, y2 = 150, z1 = -1100, z2 = 0}

-- Generate points a vertical well with radius 30m, extending from the surface 
-- to -950m and placed at (15, 0).
vert_well_points = point_factory.cylinder{radius = 30, length = 950, 
                                          center = {15,0,-475}, axis = {0,0,1}, 
                                          nr = 8, nz = 950.0/dx, 
                                          radial_spacing = 'log', 
                                          log_spacing_factor = 1.3}

-- A horizontal well meets the vertical well at the bottom, extending from 
-- x = 15 to x = 65m.
horiz_well_points = point_factory.cylinder{radius = 30, length = 50, 
                                           center = {40,0,-950}, axis = {1,0,0}, 
                                           nr = 6, nz = 10, 
                                           radial_spacing = 'log', 
                                           log_spacing_factor = 1.5}

-- Punch out points in the vertical well that interfere with the horizontal well.
points_to_remove = select_points(vert_well_points, 
                                 {near_points = horiz_well_points,
                                  within_distance = 5})
vert_well_points = remove_points(vert_well_points, points_to_remove) 

-- Generate a cubic lattice that fills the space.
lattice_points = point_factory.cubic_lattice{bounding_box = box, nx = 350/dx, ny = 300/dx, nz = 1000/dx}

-- Knock out all the points that are within 0.5*dx of a well point.
points_to_remove = select_points(lattice_points, 
                                 {near_points = vert_well_points .. horiz_well_points, 
                                 within_distance=0.5*dx})
lattice_points = remove_points(lattice_points, points_to_remove)

print("Number of points in vertical well: ", #vert_well_points)
print("Number of points in horizontal well: ", #horiz_well_points)
print("Number of points in lattice: ", #lattice_points)

-- Mesh it up, tagging the different regions.
mesh = mesh_factory.voronoi({vert_well = vert_well_points,
                             horiz_well = horiz_well_points,
                             lattice = lattice_points})
--                            box)

inf_cells = cell_tag(mesh, 'inf_cells')
print(mesh)
write_silo_mesh(mesh, 'l_well')
write_silo_points(vert_well_points .. horiz_well_points .. lattice_points, 'l_well_points')
